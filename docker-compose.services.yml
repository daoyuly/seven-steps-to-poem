version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: seven-steps-postgres
    environment:
      POSTGRES_DB: sevensteps
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sevensteps"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - seven-steps-network

  redis:
    image: redis:7-alpine
    container_name: seven-steps-redis
    command: redis-server --appendonly yes --requirepass ""
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - seven-steps-network

  neo4j:
    image: neo4j:5.0-community
    container_name: seven-steps-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - seven-steps-network

  # Microservices
  problem-framer:
    build:
      context: .
      dockerfile: services/problem_framer/Dockerfile
    container_name: seven-steps-problem-framer
    environment:
      - PORT=8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/sevensteps
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - seven-steps-network
    restart: unless-stopped

  issue-tree:
    build:
      context: .
      dockerfile: services/issue_tree/Dockerfile
    container_name: seven-steps-issue-tree
    environment:
      - PORT=8002
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/sevensteps
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - seven-steps-network
    restart: unless-stopped

  orchestrator:
    build:
      context: .
      dockerfile: services/orchestrator/Dockerfile
    container_name: seven-steps-orchestrator
    environment:
      - PORT=8000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/sevensteps
      - REDIS_URL=redis://redis:6379/0
      - PROBLEM_FRAMER_URL=http://problem-framer:8001
      - ISSUE_TREE_URL=http://issue-tree:8002
      - PRIORITIZATION_URL=http://prioritization:8003
      - PLANNER_URL=http://planner:8004
      - ANALYSIS_URL=http://analysis:8005
      - SYNTHESIZER_URL=http://synthesizer:8006
      - PRESENTATION_URL=http://presentation:8007
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      problem-framer:
        condition: service_healthy
      issue-tree:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - seven-steps-network
    restart: unless-stopped

  # API Gateway (Nginx reverse proxy)
  api-gateway:
    image: nginx:alpine
    container_name: seven-steps-api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - orchestrator
      - problem-framer
      - issue-tree
    networks:
      - seven-steps-network
    restart: unless-stopped

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: seven-steps-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - seven-steps-network

  grafana:
    image: grafana/grafana:latest
    container_name: seven-steps-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - seven-steps-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  seven-steps-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16